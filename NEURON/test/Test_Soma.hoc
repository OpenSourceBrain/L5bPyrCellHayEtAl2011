// As simple script to create a soma and add the set of ion channels to it,
// with a reasonable conductance to enable testing of the channels and
// comparison to the NeuroML equivalents
usegui = 1

{load_file("stdlib.hoc")}
{load_file("stdgui.hoc")}

create Soma
access Soma

celsius = 6.3

Soma {pt3dclear() pt3dadd(0.0, 0, 0.0, 13.4715) pt3dadd(0.0, 23.1694, 0.0, 13.4715)}
define_shape()

forall Ra = 100

insert pas
{ g_pas=3.38e-05 }
{ e_pas=-90 }


insert Ih
{ gIhbar_Ih=0.0002 }

insert Im
{ gImbar_Im=6.75e-05 }

insert K_Pst
{ gK_Pstbar_K_Pst=0.00223 }

insert K_Tst
{ gK_Tstbar_K_Tst=0.0812 }

//insert KdShu2007
//{ gkbar_KdShu2007=0.0002 }    ////    NOTE: gKdShu2007bar_KdShu2007 not gkbar_KdShu2007

insert NaTa_t
{ gNaTa_tbar_NaTa_t=0.3 }

///////////////insert NaTs2_t
///////////////{ gNaTs2_tbar_NaTs2_t=0.1 }

insert Nap_Et2
{ gNap_Et2bar_Nap_Et2=0.00172 }


insert SK_E2
{ gSK_E2bar_SK_E2=8e-05 }

insert SKv3_1
{ gSKv3_1bar_SKv3_1=0.293 }

insert Ca_LVAst
{ gCa_LVAstbar_Ca_LVAst=0.00343 }

insert Ca_HVA
{ gCa_HVAbar_Ca_HVA=0.000992 }

if (ismembrane("k_ion")) { ek = -85 }
if (ismembrane("na_ion")) { ena = 50 }

insert CaDynamics_E2

proc initialiseValues0() {

    forall  v = -90

}

objref fih0
{fih0 = new FInitializeHandler(0, "initialiseValues0()")}

objref stim1
objref stim2


Soma {
    stim1 = new IClamp(0.5)
    stim1.del = 100.0
    stim1.dur = 100.0
    stim1.amp = -0.01

    stim2 = new IClamp(0.5)
    stim2.del = 300.0
    stim2.dur = 100.0
    stim2.amp = 0.05
}



tstop = 600.0
dt = 0.0025


objref v_time
objref f_time

v_time = new Vector()
{ v_time.record(&t) }
//{ v_time.resize(70001) } // false
f_time = new File()


objref Soma_v
{ Soma_v = new Vector() }
{ Soma_v.record(&Soma.v(0.5))}
objref Soma_ca
{ Soma_ca = new Vector() }
{ Soma_ca.record(&Soma.cai(0.5))}

objref Soma_g_nat
{ Soma_g_nat = new Vector() }
{ Soma_g_nat.record(&Soma.gNaTa_t_NaTa_t(0.5))}
objref Soma_g_nap
{ Soma_g_nap = new Vector() }
{ Soma_g_nap.record(&Soma.gNap_Et2_Nap_Et2(0.5))}
objref Soma_g_kat
{ Soma_g_kat = new Vector() }
{ Soma_g_kat.record(&Soma.gK_Tst_K_Tst(0.5))}
objref Soma_g_kap
{ Soma_g_kap = new Vector() }
{ Soma_g_kap.record(&Soma.gK_Pst_K_Pst(0.5))}
objref Soma_g_ih
{ Soma_g_ih = new Vector() }
{ Soma_g_ih.record(&Soma.gIh_Ih(0.5))}
objref Soma_g_im
{ Soma_g_im = new Vector() }
{ Soma_g_im.record(&Soma.gIm_Im(0.5))}
objref Soma_g_sk
{ Soma_g_sk = new Vector() }
{ Soma_g_sk.record(&Soma.gSK_E2_SK_E2(0.5))}
objref Soma_g_kv3
{ Soma_g_kv3 = new Vector() }
{ Soma_g_kv3.record(&Soma.gSKv3_1_SKv3_1(0.5))}
objref Soma_g_cahva
{ Soma_g_cahva = new Vector() }
{ Soma_g_cahva.record(&Soma.gCa_HVA_Ca_HVA(0.5))}
objref Soma_g_calva
{ Soma_g_calva = new Vector() }
{ Soma_g_calva.record(&Soma.gCa_LVAst_Ca_LVAst(0.5))}

objref f_Soma_v


objref GraphWin_0
objref GraphWin_1
objref GraphWin_2
objref GraphWin_3

if (usegui==1) {
    GraphWin_0 = new Graph(0)
    {GraphWin_0.size(0, tstop,-110.0,50.0)}
    {GraphWin_0.view(0, -110.0, tstop, 160.0, 80, 330, 330, 250)}
    {
        GraphWin_0.addexpr("Soma.v", "Soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
        graphList[0].append(GraphWin_0)
    }

    GraphWin_1 = new Graph(0)
    {GraphWin_1.size(0, tstop,-0.1,1.1)}
    {GraphWin_1.view(0, -0.1, tstop, 1.2, 80, 330, 330, 250)}
    {
        GraphWin_1.addexpr("m_Ih", "m_Ih", 1, 1, 0.8, 0.9, 2)
        GraphWin_1.addexpr("m_Im", "m_Im", 2, 1, 0.8, 0.9, 2)
        //GraphWin_1.addexpr("m_KdShu2007", "m_KdShu2007", 3, 1, 0.8, 0.9, 2)
        //GraphWin_1.addexpr("h_KdShu2007", "h_KdShu2007", 4, 1, 0.8, 0.9, 2)
        GraphWin_1.addexpr("m_Ca", "m_Ca", 5, 1, 0.8, 0.9, 2)
        GraphWin_1.addexpr("h_Ca", "h_Ca", 6, 1, 0.8, 0.9, 2)
        graphList[0].append(GraphWin_1)
    }

    GraphWin_2 = new Graph(0)
    {GraphWin_2.size(0, tstop,0,0.005)}
    {GraphWin_2.view(0, 0, tstop, 0.005, 80, 330, 330, 250)}
    {
        GraphWin_2.addexpr("cai", "cai", 1, 1, 0.8, 0.9, 2)
        graphList[0].append(GraphWin_2)
    }

    GraphWin_3 = new Graph(0)
    {GraphWin_3.size(0, tstop,-100,100)}
    {GraphWin_3.view(0, 70, tstop, 60, 80, 330, 330, 250)}
    {
        GraphWin_3.addexpr("eca", "eca", 1, 1, 0.8, 0.9, 2)
        graphList[0].append(GraphWin_3)
    }
}

{run()}

strdef timeFilename


f_Soma_v = new File()
strdef filename
{sprint(filename, "SomaOnly.dat")}
f_Soma_v.wopen(filename)
Soma_v.printf(f_Soma_v)
f_Soma_v.close()



{ sprint(timeFilename, "%s",  "time.dat")}
{ f_time.wopen(timeFilename) }
{ v_time.printf(f_time) }
{ f_time.close() }

objref f_Soma_si
f_Soma_si = new File()
{ f_Soma_si.wopen("SomaOnly.si.dat") }
for i=0, Soma_v.size()-1 {
   f_Soma_si.printf("%f\t%f\n", v_time.x[i]/1000, Soma_v.x[i]/1000)
}
{ f_Soma_si.close() }


objref f_Soma_ca
f_Soma_ca = new File()
{ f_Soma_ca.wopen("SomaOnly.ca.dat") }
for i=0, Soma_ca.size()-1 {
   f_Soma_ca.printf("%f\t%f\n", v_time.x[i]/1000, Soma_ca.x[i])
}
{ f_Soma_ca.close() }

objref f_Soma_g

f_Soma_g = new File()
{ f_Soma_g.wopen("SomaOnly.g.dat") }
for i=0, Soma_g_nat.size()-1 {
   f_Soma_g.printf("%f\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\n", v_time.x[i]/1000, \
        Soma_g_nat.x[i]*10000, Soma_g_nap.x[i]*10000, \
        Soma_g_kap.x[i]*10000, Soma_g_kat.x[i]*10000, \
        Soma_g_ih.x[i]*10000, Soma_g_im.x[i]*10000, \
        Soma_g_sk.x[i]*10000, Soma_g_kv3.x[i]*10000, \
        Soma_g_cahva.x[i]*10000, Soma_g_calva.x[i]*10000) // convert to SI - (S/cm2) -> S/m2
}
{ f_Soma_g.close() }



if (usegui==1) {
    //   This code pops up a simple Run Control

    {
    xpanel("RunControl", 0)
    v_init = -60.0
    xbutton("Init & Run","run()")
    xbutton("Stop","stoprun=1")
    t = 0
    xvalue("t","t", 2 )
    tstop = 700.0
    xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
    dt = 0.01
     xvalue("dt","dt", 1,"setdt()", 0, 1 )
    xpanel(80,80)
    }
}

forall psection()
